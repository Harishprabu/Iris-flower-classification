# -*- coding: utf-8 -*-
"""DSP1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1K20WUci6A2WYpXLGLUwDqemVRIP-RyCk

# ***1) Iris Flowers Classification ML Project :***

# ***Dataset : http://archive.ics.uci.edu/ml/datasets/Iris ***

## *Importing All Libraries*
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import seaborn as sns
sns.set_palette('husl')
import matplotlib.pyplot as plt
# %matplotlib inline

from sklearn.model_selection import train_test_split
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import StratifiedKFold
from sklearn.metrics import classification_report
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis

from sklearn.naive_bayes import GaussianNB
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix

"""## *Loading dataset*"""

col_names =  ['sepal-length', 'sepal-width', 'petal-length', 'petal-width', 'species']
iris_dataset = "https://raw.githubusercontent.com/RitikRatnawat/LGMVIP-DataScience/main/Task%201%20-%20Iris%20Flower%20Classification/Iris_Dataset.csv"
hp = pd.read_csv(iris_dataset, names = col_names)

hp.head()

hp.tail()

"""### *Size Of Dataset*"""

data_size = hp.shape
print(f"Number of Rows : {data_size[0]}") 
print(f"Number of Columns : {data_size[1]}")

"""## *Data Wrangling*

---


"""

hp.dtypes

"""## *Checking for null values*"""

hp.info()

hp.isnull().sum()

"""## *Checking for null*"""

hp.describe()

"""
## *Checking for Unique Species*"""

unique_species = hp['species'].unique()
unique_species = unique_species.tolist()
unique_species

"""## *Checking Number of values for each Species*"""

species_count = hp['species'].value_counts()
count = species_count.tolist()
species_count.to_frame()

plt.pie(count, labels = unique_species, labeldistance = 1.20, wedgeprops = {'linewidth' : 1, 'edgecolor' : 'black'}, autopct = "%2.5f%%")
plt.title("Number of Species counts", fontsize = 20)
plt.show()

"""# **Data Visualization**
## ***Graphs for each of the feature vs Species***

## *Sepal Length vs Type *
"""

plt.bar(hp['species'],hp['sepal-width'], width = 0.4) 
plt.title("Sepal Length vs Type")
plt.show()

"""## *Sepal Width vs Type*"""

plt.bar(hp['species'],hp['sepal-width'], width = 0.4) 
plt.title("Sepal Width vs Type")
plt.show()

"""## *Sepal Width vs Type*"""

plt.bar(hp['species'],hp['petal-length'], width = 0.4) 
plt.title("Petal Length vs Type")
plt.show()

"""## *Petal Width vs Type*"""

plt.bar(hp['species'],hp['petal-width'], width = 0.4) 
plt.title("Sepal Length vs Type")
plt.show()

"""
## *Pair Plot for the dataset*"""

pplot = sns.pairplot(hp, hue =  'species', diag_kind = 'hist')
pplot.fig.suptitle("Relation of All Feature with each other", y = 1.05, fontsize = 16) 
plt.show()

"""## *Data Preparation*"""

X = hp.iloc[:, 0:4]
X.head()

Y = hp['species']
Y = Y.values
Y[0:5]

"""## *Splitting dataset into Train and Test sets*"""

x_train, x_test, y_train, y_test =  train_test_split(X,Y, test_size = 0.3, random_state = 1)
print("x_train :" + str(x_train.shape))
print("x_test :" + str(x_test.shape))
print("y_train :" + str(y_train.shape))
print("y_test :" + str(y_test.shape))

"""# ***Model Development using K Nearest Neighbors ( KNN ) Algorithm***

## *Finding best K value for the mode*
"""

best_k = 0
best_acc = 0.0
acc_arr = np.zeros((9,))

for k in range(1,10):
    # model creation and prediction on X2
    knn_temp = KNeighborsClassifier(n_neighbors = k).fit(x_train, y_train)
    y2_result = knn_temp.predict(x_test)
    
    # calculating accuracy of model
    acc_score = accuracy_score(y_test, y2_result)
    acc_arr[k-1] = acc_score
    
    if acc_score > best_acc:
        best_k = k
        knn = knn_temp
        best_acc = acc_score
        
plt.plot(range(1,10),acc_arr)
plt.xlabel("Values of K")
plt.ylabel("Accuracy")
plt.show()

print("From above line plot, the model giving maximum accuracy for the K =",best_k)

"""# *Prediction using Classification Model*"""

knn = KNeighborsClassifier(n_neighbors = best_k)
knn.fit(x_train, y_train)
y_pred =  knn.predict(x_test)
y_pred

"""## *Model Evaluation*"""

acc =  accuracy_score(y_pred, y_test)
print("Accuracy of the created KNN model is " + str(acc*100) +"%")

cmat = confusion_matrix(y_test, y_pred)
values = ['Iris-setosa', 'Iris-versicolor', 'Iris-virginica']
cmat_eval = pd.DataFrame(cmat, columns = values, index = values)
cmat_eval